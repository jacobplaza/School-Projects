# -*- coding: utf-8 -*-
"""Problem Set 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QExVQ0whXvIsJgu0Yx0arSO52HabZkvN
"""

n = int (input())
#take in the amount of terms for the universal set 
universal = set()
for i in range (1, n+1):
  universal.add(i)
#constructs the univresal set increasing by increments of 1

a_input = (input())
a_list = a_input.split()
a_set = set(a_list)
#constructs subset a using spaces as a delimiter

b_input = (input())
b_list = b_input.split()
b_set = set(b_list)
#constructs subset b using spaces as a delimiter

def set_func (universal, a_set, b_set):
  #take and return the union, intersection, differences, and complements
  union_a_b = a_set | b_set
  
  intersection_a_b = a_set & b_set
  
  difference_a_b = a_set - b_set
  
  difference_b_a = b_set - a_set
  
  complement_a = universal - a_set
  
  complement_b = universal - b_set

  return union_a_b, intersection_a_b, difference_a_b, difference_b_a, complement_a, complement_b

set_func (universal, a_set, b_set)

n = int(input())
# take in the positive integer

def sub_sets (n):
  mainset = set()
  for i in range (1, n+1):
    mainset.add (i)
  #construct a set with all the elements from 1 to n, 
  #increasing by increments of 1

  number_of_elements = len(mainset)
  #take the total length of the set
  
  number_of_subsets = (2**number_of_elements) % 1000000
  #plug in 2^n to figure out how many possible subsets, 
  #do the modulo 1 mill on that
  return number_of_subsets

sub_sets(n)

f = open('PS2_P3_sample_dataset.txt', 'r')
data = f.read()
string_list = data.splitlines()
string_1 = string_list[0]
string_2 = string_list[1]
#read in the file, and create two variables for the first and second
#lines in the file

def longest_substring (string_1, string_2):

# using list comprehension to take all the substrings of the two given strings
#and put them into two lists, one for each string

  sub_1 = [string_1[i:j] for i in range(len(string_1))
        for j in range(i+1, len(string_1)+1)]

  sub_2 = [string_2[i:j] for i in range(len(string_2))
        for j in range(i+1, len(string_2)+1)]


  sub_list = []
  for n in sub_1:
    if n in sub_2:
      sub_list.append(n)
#create another list which contains all the substrings that are in both strings

  max_length = 0 
  for item in sub_list:
    if len(item) >= max_length:
      max_length = len(item)
#find the max length of the longest element in the list with all the substrings

  maxes = []
  for n in sub_list:
    if len(n) == max_length:
      maxes.append(n)
#there are multiple elements that match the length of the max length substring,
#so i iterate through the list and i append all the terms which are as long as
#the max length to a list called maxes, which i then return 
  return maxes



longest_substring(string_1, string_2)

#i also tested it with just the sample input to make sure that my code works independent
#of reading in the data 

string_1 = "TCGGTAGATTGCGCCCACTC"
string_2 = "AGGGGCTCGCAGTGTAAGAA"

def longest_substring (string_1, string_2):

# using list comprehension to take all the substrings of the two given strings
#and put them into two lists, one for each string

  sub_1 = [string_1[i:j] for i in range(len(string_1))
        for j in range(i+1, len(string_1)+1)]

  sub_2 = [string_2[i:j] for i in range(len(string_2))
        for j in range(i+1, len(string_2)+1)]


  sub_list = []
  for n in sub_1:
    if n in sub_2:
      sub_list.append(n)
#create another list which contains all the substrings that are in both strings

  max_length = 0 
  for item in sub_list:
    if len(item) >= max_length:
      max_length = len(item)
#find the max length of the longest element in the list with all the substrings

  maxes = []
  for n in sub_list:
    if len(n) == max_length:
      maxes.append(n)
#there are multiple elements that match the length of the max length substring,
#so i iterate through the list and i append all the terms which are as long as
#the max length to a list called maxes, which i then return 
  return maxes



longest_substring(string_1, string_2)

