# -*- coding: utf-8 -*-
"""Homework 6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w7HMxc9iqzwTabqgRhQV0i4ZTRBLiNOf
"""

from collections import defaultdict

class graph: 
    def __init__(self): 
             self.graph = defaultdict(list)

    def Edge(self,u,v): 
        self.graph[u].append(v)
        self.graph[v].append(u)

airport = graph()

def add_airports():
  #function to add all the airports to the graph

  airport.Edge("BGR", "JFK")
  airport.Edge("JFK", "MSY")
  airport.Edge("JFK", "MCO")
  airport.Edge("MCO", "MSY")
  airport.Edge("MSY", "ORD")
  airport.Edge("ORD", "CMH")
  airport.Edge("ORD", "FAR")
  airport.Edge("ORD", "LAS")
  airport.Edge("FAR", "RAP")
  airport.Edge("FAR", "SEA")
  airport.Edge("SEA", "LAS")
  airport.Edge("SEA", "FLG")
  airport.Edge("LAS", "FLG")


def BFS(self, node):
  #function takes in graph and and origin node
  visited = []
  queue= [] 
  #createing a queue and a list to add the cities as they are visited

  visited.append(node)
  queue.append(node)
  #start off at ORD so append the first note to the visited list and the queue
  while queue: 
    j = queue.pop(0)
  #start by popping first city from the que 
    for other in self.graph[j]:
  #look at the cities right next to the origin
      if other not in visited:
      #if they are not in visited list, append to the visited list
        visited.append(other)
        queue.append(other)
      #add the next city to the queue. Every time the function runs it will look at the next city
  return visited

add_airports()
BFS(airport, "ORD")

from collections import defaultdict

class graph: 
    def __init__(self): 
             self.graph = defaultdict(list)

    def Edge(self,u,v): 
        self.graph[u].append(v)
        self.graph[v].append(u)

airport = graph()

def add_airports():
  #function to add all the airports to the graph

  airport.Edge("BGR", "JFK")
  airport.Edge("JFK", "MSY")
  airport.Edge("JFK", "MCO")
  airport.Edge("MCO", "MSY")
  airport.Edge("MSY", "ORD")
  airport.Edge("ORD", "CMH")
  airport.Edge("ORD", "FAR")
  airport.Edge("ORD", "LAS")
  airport.Edge("FAR", "RAP")
  airport.Edge("FAR", "SEA")
  airport.Edge("SEA", "LAS")
  airport.Edge("SEA", "FLG")
  airport.Edge("LAS", "FLG")


checked = []
#create a list to put in the cities as they are traversed
def DFS (self, node):
#the function takes in the graph, along with an origin node
  if node not in checked:
  #starts by checking if the node is in the check list, and appends if not
    checked.append(node)
    for other in self.graph[node]:
      #then sends a recursive call to add the next node to the list
      DFS(self, other)

add_airports()
DFS(airport, "ORD")
print (checked)