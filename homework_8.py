# -*- coding: utf-8 -*-
"""Homework 8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rZl27e8ECmnni3dYSd1JuyukhAVlq42k
"""

covid = read.csv(file = "/content/Covid Data.csv")
install.packages("naniar")
library(naniar)

covid2 = replace_with_na(covid, replace = list(MEDICAL_UNIT = c(97, 98, 99),
                                      USMER = c(97, 98, 99),
                                      SEX = c(97,98, 99),
                                      PATIENT_TYPE = c(97,98, 99),
                                      INTUBED = c(97,98,99),
                                      PNEUMONIA = c(97,98, 99),
                                      AGE = c(97,98, 99),
                                      PREGNANT = c(97,98, 99),
                                      DIABETES = c(97,98, 99),
                                      COPD = c(97,98, 99),
                                      ASTHMA = c(97,98, 99),
                                      IMNSUPR = c(97,98, 99),
                                      HIPERTENSION = c(97,98, 99),
                                      OTHER_DISEASE = c(97,98, 99),
                                      CARDIOVASCULAR = c(97,98, 99),
                                      OBESITY = c(97,98, 99),
                                      RENAL_CHRONIC = c(97,98, 99),
                                      TOBACCO = c(97,98, 99),
                                      CLASSIFICATION_FINAL = c(97,98, 99),
                                      ICU = c(97, 98, 99)))   
covid_3 = na.omit(covid2)
covif = subset(covid_3, select = -c(DATE_DIED))

install.packages("reticulate")
library(reticulate)
path_to_python <- install_python()
virtualenv_create("r-reticulate", python = path_to_python)

install.packages("tensorflow")
library(tensorflow)
install_tensorflow(envname = "r-reticulate")

install.packages("keras")
library("keras")

install.packages("ISLR2")

library(ISLR2)
library(keras)
library(reticulate)
library(tensorflow)

set.seed(1)
n = nrow(covif)
ntest = trunc(n / 3)
testid  = sample(1:n, ntest)

lfit = lm(CLASIFFICATION_FINAL ~ ., data = covif[-testid, ])
lpred = predict(lfit, covif[testid, ])
with(covif[testid, ], mean(abs(lpred - CLASIFFICATION_FINAL)))


x = model.matrix(CLASIFFICATION_FINAL ~. -1, data = covif)
y = covif$CLASIFFICATION_FINAL


library(glmnet)
cvfit = cv.glmnet(x[-testid, ], y[-testid],
        type.measure = "mae")
cpred = predict(cvfit, x[testid, ], s = "lambda.min")
mean(abs(y[testid] - cpred))

modnn = keras_model_sequential() %>%
  layer_dense(units = 50, activation = "relu", 
    input_shape = ncol(x)) %>%
  layer_dropout(rate = 0.4)%>%
  layer_dense(units = 1)

modnn %>% compile(loss = "mse", 
                 optimizer = optimizer_rmsprop(),
                 metrics = list("mean_absolute_error")
                 )

history = modnn %>% fit(
  x[-testid, ], y[-testid], epochs = 1500, batch_size = 32, 
  validation_data = list(x[testid, ], y[testid])
)



npred = predict(modnn, x[testid, ])
mean(abs(y[testid] - npred))